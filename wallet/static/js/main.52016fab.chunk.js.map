{"version":3,"sources":["translations/i18n.js","Components/AssetRow.js","config.js","App.js","serviceWorker.js","index.js"],"names":["i18n","use","initReactI18next","init","resources","en","zh","fallbackLng","debug","ns","defaultNS","keySeparator","interpolation","escapeValue","ASSETS","name","icon","d","AssetRow","props","unCollapse","setState","open","state","rotate","handleInputChange","event","target","value","type","checked","send","neologin","fromAddress","address","toAddress","asset","symbol","amount","network","broadcastOverride","then","txid","nodeUrl","console","log","getBalance","catch","description","data","t","this","undefined","Grid","container","direction","justify","alignItems","item","style","width","background","padding","borderRadius","transitionDelay","className","height","viewBox","xs","paddingLeft","display","marginLeft","onClick","justifyContent","transform","msTransform","WebkitTransform","WebkitTransition","msTransition","transition","cursor","Collapse","in","timeout","margin","isMobile","htmlFor","id","onChange","marginBottom","React","Component","withTranslation","server","useStyles","makeStyles","theme","formControl","minWidth","header","classes","useState","setNetwork","setAddress","mainBalance","setBalance","document","documentElement","clientWidth","setIsMobile","window","addEventListener","w","clientHeight","h","changeStyles","useEffect","getAccount","canvas","getElementById","QRCode","toCanvas","error","alert","drawQR","Constants","EventName","BLOCK_HEIGHT_CHANGED","anchorEl","setAnchorEl","handleClose","params","results","Object","keys","forEach","balances","minHeight","color","paddingBottom","fontSize","backgroundColor","FormControl","variant","Select","removeEventListener","MenuItem","textAlign","SvgIcon","aria-controls","aria-haspopup","currentTarget","Menu","keepMounted","Boolean","onClose","includes","changeLanguage","language","length","map","balance","i","key","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.52016fab.chunk.js","sourcesContent":["import i18n from \"i18next\";\nimport { initReactI18next } from \"react-i18next\";\nimport en from './en.json'\nimport zh from './zh.json'\n\ni18n\n    .use(initReactI18next)\n    .init({\n        // we init with resources\n        resources: {\n            en: en,\n            zh: zh\n        },\n        fallbackLng: \"en\",\n        debug: true,\n\n        // have a common namespace used around the full app\n        ns: [\"common\", \"inverse\"],\n        defaultNS: \"common\",\n\n        keySeparator: false, // we use content as keys\n\n        interpolation: {\n            escapeValue: false\n        }\n    });\n\nexport default i18n;\n","import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport neologin from 'neologin';\nimport Send from '@material-ui/icons/Send';\nimport Collapse from '@material-ui/core/Collapse';\nimport { withTranslation } from 'react-i18next';\nimport './assetrow.css'\n\nconst ASSETS = {\n    'NEO':\n    {\n        name: 'NEO',\n        icon: <path d=\"M207.288 35.521L132.161 0 21.651 39.9l75.127 35.521 110.51-39.9zm-77.066 42.211v73.601l78.278 36.982V49.471l-78.278 28.261zM94.839 89.441V227L18.5 190.991V53.348\"></path>\n    },\n    'GAS':\n    {\n        name: 'GAS',\n        icon: <path d=\"M207.288 35.521L132.161 0 21.651 39.9l75.127 35.521 110.51-39.9zm-77.066 42.211v73.601l78.278 36.982V49.471l-78.278 28.261zM94.839 89.441V227L18.5 190.991V53.348\"></path>\n    }\n}\n\nclass AssetRow extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            open: false,\n            toAddress: '',\n            amount: '',\n            rotate: false\n        };\n    }\n\n    unCollapse = () => {\n        this.setState({ open: !this.state.open, rotate: !this.state.rotate })\n    }\n\n    handleInputChange = (event) => {\n        const target = event.target;\n        const value = target.type === 'checkbox' ? target.checked : target.value;\n        const name = target.name;\n\n        this.setState({\n            [name]: value\n        })\n    }\n\n    send = () => {\n        neologin.send({\n            fromAddress: this.props.address,\n            toAddress: this.state.toAddress,\n            asset: this.props.symbol,\n            amount: this.state.amount,\n            network: this.props.network,\n            broadcastOverride: false,\n        })\n            .then(({ txid, nodeUrl }) => {\n                this.setState({ open: false, rotate: false })\n                console.log('Send transaction success!');\n                console.log('Transaction ID: ' + txid);\n                console.log('RPC node URL: ' + nodeUrl);\n                this.props.getBalance()\n            })\n            .catch(({ type, description, data }) => {\n                switch (type) {\n                    case \"NO_PROVIDER\":\n                        console.log('No provider available.');\n                        break;\n                    case \"SEND_ERROR\":\n                        console.log('There was an error when broadcasting this transaction to the network.');\n                        break;\n                    case \"MALFORMED_INPUT\":\n                        console.log('The receiver address provided is not valid.');\n                        break;\n                    case \"CANCELED\":\n                        console.log('The user has canceled this transaction.');\n                        break;\n                    case \"INSUFFICIENT_FUNDS\":\n                        console.log('The user has insufficient funds to execute this transaction.');\n                        break;\n                    default:\n                        break;\n                }\n            });\n\n    }\n\n    render() {\n        const t = this.props.t\n        return (\n\t\t\tASSETS[this.props.symbol] === undefined ? null :\n            <Grid\n                container\n                direction=\"column\"\n                justify=\"center\"\n                alignItems=\"flex-start\"\n            >\n                <Grid item style={{ width: '100%' }}>\n                    <Grid container direction=\"row\" justify=\"space-between\" alignItems=\"center\" style={{\n                        background: '#2d2d37',\n                        padding: '8px 15px',\n                        borderRadius: this.state.open ? '5px 5px 0px 0px' : '5px',\n                        transitionDelay: !this.state.open ? '281ms' : '0ms'\n                    }}\n                    >\n                        <Grid item>\n                            <div className=\"badge\">\n                                <div className=\"crypto\">\n                                    <svg width=\"20\" height=\"20\" viewBox=\"0 0 226 226\">\n                                        {ASSETS[this.props.symbol].icon}\n                                    </svg>\n                                </div>\n                            </div>\n                        </Grid>\n                        <Grid item xs style={{ paddingLeft: '15px' }}>\n                            <span style={{ display: 'block' }}>{ASSETS[this.props.symbol].name}</span>\n                        </Grid>\n                        <Grid item>{this.props.amount} {this.props.symbol}</Grid>\n                        <Grid item style={{ marginLeft: '1rem' }}>\n                            <Send\n                                onClick={() => {\n                                    this.unCollapse()\n                                }}\n                                style={!this.state.rotate ?\n                                    {\n                                        cursor: 'pointer',\n                                        alignItems: 'center',\n                                        display: 'flex',\n                                        WebkitTransition: '-webkit-transform .2s',\n                                        msTransition: '-ms-transform .2s',\n                                        transition: 'transform .2s',\n                                        justifyContent: 'center',\n                                    } : {\n                                        justifyContent: 'center',\n                                        transform: 'rotate(90deg)',\n                                        msTransform: 'rotate(90deg)',\n                                        WebkitTransform: 'rotate(90deg)',\n                                        WebkitTransition: '-webkit-transform .2s',\n                                        msTransition: '-ms-transform .2s',\n                                        transition: 'transform .2s',\n                                        cursor: 'pointer',\n                                        alignItems: 'center',\n                                        display: 'flex',\n                                    }} />\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Collapse in={this.state.open} timeout=\"auto\" style={{ width: '100%' }}>\n                    <Grid item xs style={{ width: '100%' }}>\n                        <Grid container direction=\"column\" style={{\n                            background: '#2d2d37',\n                            padding: '8px 15px',\n                            alignItems: 'center'\n                        }}>\n                            <Grid item>\n                                <p className=\"label\" style={{ margin: 0 }}>{t(\"subtittle_sendAsset\")}</p>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                    <Grid item style={{ width: '100%' }}>\n                        <Grid container direction={this.props.isMobile ? \"column\" : \"row\"} style={{\n                            background: '#2d2d37',\n                            padding: '8px 15px'\n                        }}>\n                            <Grid item xs>\n                                <label className=\"label\" htmlFor=\"toAddress\">{t(\"label_address\")}</label>\n                                <input type=\"text\" name=\"toAddress\" id=\"toAddress\" onChange={this.handleInputChange} />\n                            </Grid>\n                            <Grid item style={{ width: '1rem', height: this.props.isMobile ? '1rem' : '1px' }}>\n                            </Grid>\n                            <Grid item>\n                                <label className=\"label\" htmlFor=\"amount\">{t(\"label_amount\")}</label>\n                                <input type=\"text\" name=\"amount\" id=\"amount\" onChange={this.handleInputChange} />\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                    <Grid item style={{ width: '100%' }}>\n                        <Grid container\n                            direction=\"row\"\n                            justify=\"flex-end\"\n                            alignItems=\"center\" style={{\n                                background: '#2d2d37',\n                                padding: '8px 15px',\n                                borderRadius: '0px 0px 5px 5px'\n                            }}>\n                            <Grid item style={{ marginBottom: '0.5rem', width: this.props.isMobile ? '100%' : 'unset' }}>\n                                <input style={{ width: this.props.isMobile ? '100%' : 'unset' }} type=\"submit\" value={t(\"button_send\")} className=\"primary\" onClick={this.send} />\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                </Collapse>\n            </Grid >\n        )\n    }\n}\n\nexport default withTranslation()(AssetRow)\n","export const server = \"https://neologin.io/login\";","import React, { useEffect } from 'react';\nimport './App.css';\n\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles } from '@material-ui/core/styles';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport QRCode from 'qrcode'\nimport SvgIcon from '@material-ui/core/SvgIcon';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport AssetRow from './Components/AssetRow'\nimport Menu from '@material-ui/core/Menu';\nimport neologin from 'neologin'\nimport { withTranslation } from 'react-i18next';\n\nimport { server } from './config';\n\nfunction drawQR(address) {\n  let canvas = document.getElementById('addressQR')\n  QRCode.toCanvas(canvas, address, (error) => {\n    if (error) {\n      console.error(error);\n      alert(error);\n    }\n  })\n}\n\nconst useStyles = makeStyles(theme => ({\n  formControl: {\n    minWidth: 110,\n  },\n  header: {\n    margin: '1rem'\n  }\n}));\n\nfunction App({ t, i18n }) {\n\n  const classes = useStyles();\n  const [network, setNetwork] = React.useState('TestNet');\n  const [address, setAddress] = React.useState('');\n  const [mainBalance, setBalance] = React.useState([]);\n  const [isMobile, setIsMobile] = React.useState(document.documentElement.clientWidth < 576);\n\n  function changeStyles(w, h) {\n    w < 576 ? setIsMobile(true) : setIsMobile(false)\n  }\n\n  function getWindowSize() {\n    // Get width and height of the window excluding scrollbars\n    var w = document.documentElement.clientWidth;\n    var h = document.documentElement.clientHeight;\n    changeStyles(w, h)\n  }\n\n  window.addEventListener(\"resize\", getWindowSize);\n\n  function handleChange(event) {\n    setNetwork(event.target.value);\n    getBalance(address, event.target.value);\n    neologin.removeEventListener(neologin.Constants.EventName.BLOCK_HEIGHT_CHANGED);\n    neologin.addEventListener(neologin.Constants.EventName.BLOCK_HEIGHT_CHANGED, data => getBalance(address, event.target.value));\n  }\n\n  useEffect(() => {\n    neologin.getAccount()\n      .then(({ address }) => {\n        drawQR(address)\n        setAddress(address)\n        getBalance(address, network)\n        neologin.addEventListener(neologin.Constants.EventName.BLOCK_HEIGHT_CHANGED, data => getBalance(address, network));\n      })\n      .catch(({ type, description, data }) => {\n        setAddress(type)\n        switch (type) {\n          case \"NO_PROVIDER\":\n            console.log('No provider available.');\n            break;\n          case \"CONNECTION_DENIED\":\n            console.log('The user rejected the request to connect with your dApp');\n            break;\n          default:\n            break\n        }\n      })\n  }, [])\n\n  const [anchorEl, setAnchorEl] = React.useState(null);\n\n  const handleClick = event => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  function getBalance(address, network) {\n    neologin.getBalance({\n      params: {\n        address: address\n      },\n      network: network,\n    })\n      .then((results) => {\n        Object.keys(results).forEach(address => {\n          const balances = results[address];\n          setBalance(balances)\n        });\n      })\n      .catch(({ type, description, data }) => {\n        switch (type) {\n          case \"NO_PROVIDER\":\n            console.log('No provider available.');\n            break;\n          case \"CONNECTION_DENIED\":\n            console.log('The user rejected the request to connect with your dApp');\n            break;\n          default:\n            break;\n        }\n      });\n  }\n\n  return (\n    <div style={{ minHeight: '100vh', background: '#21242c', color: 'white', paddingBottom: '5rem' }}>\n      <Grid container direction=\"column\" justify=\"center\" alignItems=\"center\">\n        <Grid item style={{\n          width: '100%',\n          fontSize: '20px',\n          backgroundColor: '#2d2d37',\n          color: '#fff',\n          padding: '1rem',\n        }}>\n          <Grid container direction=\"row\" justify=\"space-between\" alignItems=\"center\">\n            <Grid item xs>\n              <FormControl variant=\"outlined\" className={classes.formControl}>\n                <Select\n                  value={network}\n                  onChange={handleChange}\n                  style={{\n                    height: '2rem',\n                    background: 'white',\n                    borderRadius: '4px'\n                  }}\n                >\n                  <MenuItem value='MainNet'>{t(\"mainNet\")}</MenuItem>\n                  <MenuItem value='TestNet'>{t(\"testNet\")}</MenuItem>\n                </Select>\n              </FormControl>\n            </Grid>\n            <Grid item xs style={{ textAlign: 'center' }}>\n              <span>{isMobile ? '' : t(\"tittle\")}</span>\n            </Grid>\n            <Grid item xs style={{ textAlign: 'end' }}>\n              <FormControl variant=\"outlined\" className={classes.formControl} style={{ alignItems: 'flex-end' }}>\n                <SvgIcon aria-controls=\"simple-menu\" aria-haspopup=\"true\" onClick={handleClick} style={{ cursor: 'pointer' }}>\n                  <path d=\"M9 5.5c.83 0 1.5-.67 1.5-1.5S9.83 2.5 9 2.5 7.5 3.17 7.5 4 8.17 5.5 9 5.5zm0 2c-.83 0-1.5.67-1.5 1.5s.67 1.5 1.5 1.5 1.5-.67 1.5-1.5S9.83 7.5 9 7.5zm0 5c-.83 0-1.5.67-1.5 1.5s.67 1.5 1.5 1.5 1.5-.67 1.5-1.5-.67-1.5-1.5-1.5z\" />\n                </SvgIcon>\n                <Menu\n                  id=\"simple-menu\"\n                  anchorEl={anchorEl}\n                  keepMounted\n                  open={Boolean(anchorEl)}\n                  onClose={handleClose}\n                >\n                  <MenuItem onClick={() => {\n                    handleClose()\n                    window.open(server.includes(\"localhost\") ? server + \"?settings=true\" : server + \"?settings=true/\", 'NeoLogin - ' + t('login'), 'width=400,height=660')\n                  }}>{t(\"menu_settings\")}</MenuItem>\n                  <MenuItem onClick={() => {\n                    handleClose()\n                    window.open(\"https://github.com/safudex/neologin/issues\")\n                  }}>\n                    {t(\"menu_issues\")}\n                  </MenuItem>\n                  <MenuItem onClick={() => {\n                    handleClose()\n                    i18n.changeLanguage(i18n.language === 'zh' ? 'en' : 'zh')\n                  }}>\n                    {t(\"inverse:menu_language\")}\n                  </MenuItem>\n                </Menu>\n              </FormControl>\n            </Grid>\n          </Grid>\n        </Grid>\n        <Grid item style={{ width: '100%' }}>\n          <Grid container direction='column' justify=\"flex-start\" alignItems=\"center\">\n            {\n              isMobile ?\n                <Grid item>\n                  <h3>{t(\"tittle\")}</h3>\n                </Grid>\n                : null\n            }\n            <Grid item style={{ margin: isMobile ? '1rem 0 1rem 0' : '3rem 0 1rem 0' }}>\n              <canvas id=\"addressQR\" />\n            </Grid>\n            <Grid item style={{ marginBottom: isMobile ? '1.5rem' : '3rem' }}>\n              <span>{address}</span>\n            </Grid>\n            {\n              mainBalance.length !== 0 ?\n                mainBalance.map((balance, i) =>\n                  <Grid item key={i} style={{ width: isMobile ? '90%' : '50%', margin: '0.3rem 0rem' }}>\n                    <AssetRow isMobile={isMobile} symbol={balance.symbol} amount={balance.amount} address={address} network={network} getBalance={() => this.getBalance(address, network)} />\n                  </Grid>\n                )\n                :\n                address === '' ? null :\n                  <Grid item style={{ margin: '0.3rem 0rem' }}>\n                    <p>{t(\"info_noFunds\")}</p>\n                  </Grid>\n            }\n          </Grid>\n        </Grid>\n      </Grid>\n    </div >\n  );\n}\n\nexport default withTranslation()(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport \"./translations/i18n\";\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}